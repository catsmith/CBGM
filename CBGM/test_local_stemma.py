from unittest import TestCase
import logging
import tempfile
import os
import shutil
from CBGM.local_stemma import local_stemma
from CBGM import test_db
from CBGM.test_logging import default_logging

default_logging()
logger = logging.getLogger(__name__)

TEST_DATA = """# -*- coding: utf-8 -*-
# This is a made up data set, purely for testing.

from CBGM.populate_db import Reading, LacunaReading, AllBut
from CBGM.shared import UNCL, INIT, OL_PARENT

all_mss = set(['B', 'C', 'D', 'E'])

struct = {
    '21': {
        '2': [
            Reading('a', 'ηθελον', AllBut('B'), INIT),
            Reading('b', 'ηλθον', ['B'], 'a')],
        '6-8': [
            Reading('a', 'λαβειν αυτον', AllBut('C', 'D'), UNCL),
            Reading('b', 'αυτον λαβειν', ['C'], UNCL),
            LacunaReading(['D'])],
    },
    '22': {
        '3': [
            Reading('a', '', AllBut('C'), INIT),
            Reading('b', 'τε', ['C'], 'a')],
        '20': [
            Reading('a', 'ιδων', ['B'], 'b'),
            Reading('b', 'ειδον', ['C'], 'c'),
            Reading('c', 'ειδεν', ['D'], INIT),
            Reading('d', 'ειδως', ['E'], 'c')],
    },
    '23': {
        '1': [
            Reading('a', '', AllBut('C', 'B'), INIT),
            Reading('b', 'και', ['B'], 'a'),
            LacunaReading(['C'])],
        '4-10': [
            Reading('a', 'ηλθεν πλοιαρια εκ τιβεριαδος', ['B'], UNCL),
            Reading('b', 'ηλθεν πλοια εκ τιβεριαδος', ['C'], UNCL),
            Reading('c', 'ηλθεν πλοια εκ της τιβεριαδος', ['D', 'E'], UNCL)],
    }
}
"""

SVG = """<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: G Pages: 1 -->
<svg width="84pt" height="167pt"
 viewBox="0.00 0.00 84.00 167.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 163)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-163 80,-163 80,4 -4,4"/>
<!-- a -->
<g id="node1" class="node"><title>a</title>
<text text-anchor="middle" x="14.5" y="-11.4" font-family="Times,serif" font-size="12.00">a</text>
</g>
<!-- b -->
<g id="node2" class="node"><title>b</title>
<text text-anchor="middle" x="14.5" y="-76.4" font-family="Times,serif" font-size="12.00">b</text>
</g>
<!-- b&#45;&gt;a -->
<g id="edge1" class="edge"><title>b&#45;&gt;a</title>
<path fill="none" stroke="black" d="M14.5,-64.8299C14.5,-55.9139 14.5,-44.1561 14.5,-34.356"/>
<polygon fill="black" stroke="black" points="16.2501,-34.1433 14.5,-29.1434 12.7501,-34.1434 16.2501,-34.1433"/>
</g>
<!-- c -->
<g id="node3" class="node"><title>c</title>
<text text-anchor="middle" x="37.5" y="-141.4" font-family="Times,serif" font-size="12.00">c</text>
</g>
<!-- c&#45;&gt;b -->
<g id="edge2" class="edge"><title>c&#45;&gt;b</title>
<path fill="none" stroke="black" d="M32.5093,-129.83C29.2241,-120.831 24.8822,-108.938 21.2847,-99.0843"/>
<polygon fill="black" stroke="black" points="22.8396,-98.24 19.4809,-94.1434 19.5518,-99.4403 22.8396,-98.24"/>
</g>
<!-- d -->
<g id="node4" class="node"><title>d</title>
<text text-anchor="middle" x="61.5" y="-76.4" font-family="Times,serif" font-size="12.00">d</text>
</g>
<!-- c&#45;&gt;d -->
<g id="edge3" class="edge"><title>c&#45;&gt;d</title>
<path fill="none" stroke="black" d="M42.7076,-129.83C46.1357,-120.831 50.6664,-108.938 54.4203,-99.0843"/>
<polygon fill="black" stroke="black" points="56.1578,-99.4388 56.3025,-94.1434 52.8871,-98.1928 56.1578,-99.4388"/>
</g>
</g>
</svg>"""

class TestLocalStemma(TestCase):
    @classmethod
    def setUpClass(cls):
        cls.test_db = test_db.TestDatabase(TEST_DATA)
        cls.tmpdir = tempfile.mkdtemp(__name__)

    @classmethod
    def tearDownClass(cls):
        cls.test_db.cleanup()
        shutil.rmtree(cls.tmpdir)

    def test_local_stemma(self):
        """
        Test the local stemma (text and svg file)
        """
        l = local_stemma(self.test_db.db_file, ['22/20'], path=self.tmpdir)
        exp = """label	text	witnesses
a	ιδων	B
b	ειδον	C
c	ειδεν	D
d	ειδως	E"""
        self.assertEqual(l.strip(), exp)

        svg = os.path.join(self.tmpdir, '22_20.svg')
        with open(svg) as f:
            data = f.read().strip()

        self.assertEqual(data, SVG)
