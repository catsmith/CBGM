#!/usr/bin/env python
# encoding: utf-8

import re
import sqlite3
from collections import defaultdict
from CBGM.shared import witintify


def intify(x):
    # Return a tuple of integers for a given vu ident
    return tuple([int(x) for x in re.findall('([0-9]+)', x)])


class LabelMapper(object):
    # Default pool to use to replace labels that are too long (e.g. i2)
    # Note, we exclude ο and ι as they're too similar to latin.
    default_pool = 'αβγδεζηθκλμνξπρστυφχψω'

    def __init__(self, pool=None):
        self.mapping = defaultdict(dict)
        self.pool_next = defaultdict(int)
        self.pool = pool if pool is not None else self.default_pool

    def get_single_char(self, variant_unit, label):
        assert label not in self.pool  # these need to be a different set

        if label in self.mapping[variant_unit]:
            # Already done this one
            return self.mapping[variant_unit][label]

        if len(label) == 1:
            self.mapping[variant_unit][label] = label
        else:
            # We need a new one
            pool_label = self.pool[self.pool_next[variant_unit]]
            self.pool_next[variant_unit] += 1
            self.mapping[variant_unit][label] = pool_label
            print("Mapping {} to {} (in {}) as it was too long...".format(label, pool_label, variant_unit))

        return self.mapping[variant_unit][label]

def main(db_file):
    """
    Prints stripes, grouping witnesses by stripe

    @param db_file: db file
    """
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()

    sql = "SELECT DISTINCT variant_unit FROM cbgm"
    cursor.execute(sql)
    variant_units = [x[0] for x in cursor.fetchall()]

    # sort by the two integer parts of the vu
    variant_units.sort(key=lambda s: list(map(intify, s.split('/'))))

    ms_readings = defaultdict(dict)
    lm = LabelMapper()
    sql = """SELECT label, witness, variant_unit FROM cbgm"""
    for label, witness, variant_unit in cursor.execute(sql):
        singlechar = lm.get_single_char(variant_unit, label)
        ms_readings[witness][variant_unit] = singlechar

    ms_stripes = defaultdict(list)
    for wit in ms_readings:
        stripe = []
        for vu in variant_units:
            stripe.append(ms_readings[wit].get(vu, '?'))

        ms_stripes[''.join(stripe)].append(wit)

    r_ms_stripes = {}
    for stripe, wits in list(ms_stripes.items()):
        st_wits = ', '.join(sorted(wits, key=lambda x: witintify(x)))
        r_ms_stripes[st_wits] = stripe

    keys = sorted(list(r_ms_stripes.keys()), key=lambda x: witintify(x))

    for key in keys:
        print('{} {}'.format(key, r_ms_stripes[key]))


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Print stripes and highlight duplicates.")
    parser.add_argument('dbfile',
                        help='sqlite db filename (see populate.py)')

    args = parser.parse_args()

    print("Using database: {}".format(args.dbfile))

    main(args.dbfile)
